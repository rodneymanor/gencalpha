"use client";

import { useState } from "react";

import { Wand2, X, FileText, Lightbulb, MessageSquare, Sparkles } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useScriptGeneration } from "@/hooks/use-script-generation";

interface GhostWriterSectionProps {
  onClose?: () => void;
}

const TEMPLATE_CATEGORIES = [
  {
    id: "scripts",
    title: "Script Templates",
    icon: <FileText className="h-4 w-4" />,
    templates: [
      {
        id: "hook-bridge-nugget",
        title: "Hook → Bridge → Golden Nugget",
        description: "Classic viral video structure for maximum engagement",
        prompt: "Create a script using the hook-bridge-golden nugget structure about:",
      },
      {
        id: "storytelling",
        title: "Storytelling Script",
        description: "Narrative-driven content that captivates audiences",
        prompt: "Write a compelling storytelling script about:",
      },
      {
        id: "tutorial",
        title: "Tutorial/How-To",
        description: "Educational content that teaches something valuable",
        prompt: "Create a tutorial script that teaches people how to:",
      },
    ],
  },
  {
    id: "hooks",
    title: "Hook Generators",
    icon: <Lightbulb className="h-4 w-4" />,
    templates: [
      {
        id: "question-hooks",
        title: "Question Hooks",
        description: "Curiosity-driven opening lines",
        prompt: "Generate 10 question-based hooks for content about:",
      },
      {
        id: "story-hooks",
        title: "Story Hooks",
        description: "Narrative opening that draws viewers in",
        prompt: "Create 10 story-based hooks for content about:",
      },
      {
        id: "shocking-hooks",
        title: "Shocking Statement Hooks",
        description: "Bold claims that stop the scroll",
        prompt: "Generate 10 shocking statement hooks about:",
      },
    ],
  },
  {
    id: "content",
    title: "Content Ideas",
    icon: <MessageSquare className="h-4 w-4" />,
    templates: [
      {
        id: "trending-topics",
        title: "Trending Topic Ideas",
        description: "Content ideas based on current trends",
        prompt: "Generate 10 trending content ideas for the niche:",
      },
      {
        id: "evergreen-content",
        title: "Evergreen Content",
        description: "Timeless content that always performs",
        prompt: "Create 10 evergreen content ideas for:",
      },
      {
        id: "series-ideas",
        title: "Content Series",
        description: "Multi-part content concepts",
        prompt: "Design a 5-part content series about:",
      },
    ],
  },
];

export function GhostWriterSection({ onClose }: GhostWriterSectionProps) {
  const [selectedCategory, setSelectedCategory] = useState(TEMPLATE_CATEGORIES[0]);
  const [selectedTemplate, setSelectedTemplate] = useState(selectedCategory.templates[0]);
  const [userInput, setUserInput] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const { generateScript } = useScriptGeneration();

  const handleGenerate = async () => {
    if (!userInput.trim()) return;

    setIsGenerating(true);
    try {
      const fullPrompt = `${selectedTemplate.prompt} ${userInput.trim()}`;

      if (selectedTemplate.id === "hook-bridge-nugget") {
        const result = await generateScript(userInput.trim(), "60");
        if (result.success && result.script) {
          const markdown = `# Generated Script

## Hook
${result.script.hook}

## Bridge
${result.script.bridge}

## Golden Nugget
${result.script.goldenNugget}

## Call to Action
${result.script.wta}`;

          // Send to slideout
          window.dispatchEvent(
            new CustomEvent("write:editor-set-content", {
              detail: { content: markdown },
            }),
          );
        }
      } else {
        // For other templates, create a structured request
        const markdown = `# ${selectedTemplate.title}

**Prompt:** ${fullPrompt}

*This content will be generated by Claude...*`;

        window.dispatchEvent(
          new CustomEvent("write:editor-set-content", {
            detail: { content: markdown },
          }),
        );
      }

      setUserInput("");
    } catch (error) {
      console.error("Generation failed:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="flex h-full flex-col">
      {/* Header */}
      <div className="border-border bg-background flex items-center justify-between border-b p-4">
        <div>
          <h2 className="text-foreground text-lg font-semibold">Ghost Writer</h2>
          <p className="text-muted-foreground text-sm">AI-powered writing templates and assistance</p>
        </div>
        {onClose && (
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Categories Sidebar */}
        <div className="border-border w-64 border-r">
          <div className="p-4">
            <h3 className="text-foreground mb-3 font-medium">Categories</h3>
            <div className="space-y-1">
              {TEMPLATE_CATEGORIES.map((category) => (
                <button
                  key={category.id}
                  onClick={() => {
                    setSelectedCategory(category);
                    setSelectedTemplate(category.templates[0]);
                  }}
                  className={`flex w-full items-center gap-3 rounded-[var(--radius-button)] px-3 py-2 text-left transition-colors ${
                    selectedCategory.id === category.id ? "bg-accent text-accent-foreground" : "hover:bg-accent/50"
                  }`}
                >
                  {category.icon}
                  <span className="text-sm font-medium">{category.title}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Templates and Generator */}
        <div className="flex flex-1 flex-col">
          {/* Templates List */}
          <div className="border-border border-b p-4">
            <h3 className="text-foreground mb-3 font-medium">{selectedCategory.title}</h3>
            <div className="grid gap-2">
              {selectedCategory.templates.map((template) => (
                <Card
                  key={template.id}
                  className={`cursor-pointer p-3 transition-all ${
                    selectedTemplate.id === template.id ? "bg-accent border-accent-foreground/20" : "hover:bg-accent/50"
                  }`}
                  onClick={() => setSelectedTemplate(template)}
                >
                  <h4 className="text-foreground mb-1 font-medium">{template.title}</h4>
                  <p className="text-muted-foreground text-sm">{template.description}</p>
                </Card>
              ))}
            </div>
          </div>

          {/* Generator Interface */}
          <div className="flex-1 p-4">
            <div className="mx-auto max-w-2xl">
              <div className="mb-4">
                <h4 className="text-foreground mb-2 font-medium">{selectedTemplate.title}</h4>
                <p className="text-muted-foreground text-sm">{selectedTemplate.description}</p>
              </div>

              <div className="mb-4">
                <label className="text-foreground mb-2 block text-sm font-medium">{selectedTemplate.prompt}</label>
                <Textarea
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  placeholder="Enter your topic or idea..."
                  className="min-h-[100px] resize-none"
                />
              </div>

              <div className="flex gap-2">
                <Button onClick={handleGenerate} disabled={!userInput.trim() || isGenerating} className="gap-2">
                  {isGenerating ? (
                    <>
                      <Sparkles className="h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Wand2 className="h-4 w-4" />
                      Generate
                    </>
                  )}
                </Button>
                <Button variant="outline" onClick={() => setUserInput("")}>
                  Clear
                </Button>
              </div>

              {/* Quick Templates */}
              <div className="mt-6">
                <h5 className="text-foreground mb-3 text-sm font-medium">Quick Start Examples:</h5>
                <div className="flex flex-wrap gap-2">
                  {[
                    "morning routines",
                    "productivity tips",
                    "cooking hacks",
                    "fitness motivation",
                    "travel advice",
                    "business insights",
                  ].map((example) => (
                    <Button
                      key={example}
                      variant="outline"
                      size="sm"
                      onClick={() => setUserInput(example)}
                      className="text-xs"
                    >
                      {example}
                    </Button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
