openapi: 3.0.3
info:
  title: Gen-C Scripts API
  version: 1.0.0
  description: |
    OpenAPI specification for key backend surfaces used by the dashboard.
    The documented endpoints power script CRUD flows in the dashboard and the
    YouTube idea seed generator. Responses follow the existing `{ success: ... }`
    envelope used by the legacy fetch helpers.
servers:
  - url: https://api.gencapp.pro
    description: Production
  - url: http://localhost:5001
    description: Local development
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Note:
      type: object
      additionalProperties: true
      required: [id, title, content, createdAt, updatedAt]
      properties:
        id: { type: string }
        title: { type: string }
        content: { type: string }
        tags:
          type: array
          items: { type: string }
        starred: { type: boolean }
        userId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    NotesResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
        notes:
          type: array
          items: { $ref: "#/components/schemas/Note" }
    NoteResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
        note: { $ref: "#/components/schemas/Note" }
    CreateNoteRequest:
      type: object
      additionalProperties: true
      required: [title, content]
      properties:
        title: { type: string }
        content: { type: string }
        tags:
          type: array
          items: { type: string }
        starred: { type: boolean }
    UpdateNoteRequest:
      type: object
      additionalProperties: true
      properties:
        title: { type: string }
        content: { type: string }
        tags:
          type: array
          items: { type: string }
        starred: { type: boolean }
    Collection:
      type: object
      additionalProperties: true
      required: [id, title, userId]
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        userId: { type: string }
        videoCount: { type: number }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CollectionsResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
        collections:
          type: array
          items: { $ref: "#/components/schemas/Collection" }
    MoveVideoRequest:
      type: object
      additionalProperties: false
      required: [videoId, toCollectionId]
      properties:
        videoId: { type: string }
        fromCollectionId: { type: string }
        toCollectionId: { type: string }
    CopyVideoRequest:
      type: object
      additionalProperties: false
      required: [videoId, toCollectionId]
      properties:
        videoId: { type: string }
        fromCollectionId: { type: string }
        toCollectionId: { type: string }
    UpdateCollectionRequest:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
    VideosResponse:
      type: object
      additionalProperties: true
      required: [success, videos]
      properties:
        success:
          type: boolean
          enum: [true]
        videos:
          type: array
          items:
            type: object
            additionalProperties: true
        totalCount: { type: number }
        lastDocId: { type: string }
    AddVideoToCollectionRequest:
      type: object
      additionalProperties: true
      required: [userId, collectionId, videoData]
      properties:
        userId: { type: string }
        collectionId: { type: string }
        videoData:
          type: object
          additionalProperties: true
    Script:
      type: object
      description: Script document persisted in Firestore.
      required: [id, title, content, createdAt, updatedAt]
      properties:
        id: { type: string }
        title: { type: string }
        content: { type: string }
        authors: { type: string }
        status:
          type: string
          enum: [draft, published, scheduled, sent]
        performance:
          type: object
          additionalProperties: false
          properties:
            views: { type: number }
            engagement: { type: number }
        category: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        viewedAt: { type: string, format: date-time }
        duration: { type: string }
        tags:
          type: array
          items: { type: string }
        fileType:
          type: string
          enum: [Script, Template]
        summary: { type: string }
        userId: { type: string }
        approach:
          type: string
          enum: [speed-write, educational, ai-voice]
        voice:
          $ref: "#/components/schemas/ScriptVoice"
        originalIdea: { type: string }
        targetLength: { type: string }
        wordCount: { type: number }
        characterCount: { type: number }
        source: { type: string }
        scheduledDate: { type: string, format: date-time }
        platform:
          type: string
          enum: [tiktok, instagram, youtube]
        publishedUrl: { type: string, format: uri }
        isThread: { type: boolean }
        threadParts:
          type: array
          items: { type: string }
        elements:
          type: object
          additionalProperties: true
      additionalProperties: true
    ScriptVoice:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        name: { type: string }
        badges:
          type: array
          items: { type: string }
    CreateScriptRequest:
      type: object
      required: [title, content, approach]
      additionalProperties: true
      properties:
        title: { type: string }
        content: { type: string }
        category: { type: string }
        tags:
          type: array
          items: { type: string }
        summary: { type: string }
        approach:
          type: string
          enum: [speed-write, educational, ai-voice]
        voice:
          $ref: "#/components/schemas/ScriptVoice"
        originalIdea: { type: string }
        targetLength: { type: string }
        source: { type: string }
        scheduledDate: { type: string, format: date-time }
        platform:
          type: string
          enum: [tiktok, instagram, youtube]
        status:
          type: string
          enum: [draft, scheduled, sent]
        isThread: { type: boolean }
        threadParts:
          type: array
          items: { type: string }
    UpdateScriptRequest:
      type: object
      additionalProperties: true
      properties:
        title: { type: string }
        content: { type: string }
        category: { type: string }
        tags:
          type: array
          items: { type: string }
        summary: { type: string }
        status:
          type: string
          enum: [draft, published, scheduled, sent]
        scheduledDate: { type: string, format: date-time }
        platform:
          type: string
          enum: [tiktok, instagram, youtube]
        publishedUrl: { type: string, format: uri }
        isThread: { type: boolean }
        threadParts:
          type: array
          items: { type: string }
    ErrorResponse:
      type: object
      required: [success, error]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [false]
        error: { type: string }
        debug:
          type: object
          description: Optional debug payload returned for internal errors.
    ScriptsResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
        scripts:
          type: array
          items: { $ref: "#/components/schemas/Script" }
    ScriptResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
        script: { $ref: "#/components/schemas/Script" }
    BasicSuccessResponse:
      type: object
      required: [success]
      additionalProperties: true
      properties:
        success:
          type: boolean
          enum: [true]
    TranscribeFromUrlRequest:
      type: object
      additionalProperties: true
      required: [videoUrl]
      properties:
        videoUrl: { type: string, format: uri }
        platform:
          type: string
          enum: [tiktok, instagram, youtube]
        preferAudioOnly: { type: boolean }
    TranscribeFromUrlResponse:
      type: object
      additionalProperties: true
      required: [success]
      properties:
        success:
          type: boolean
          enum: [true]
        transcript: { type: string }
        meta:
          type: object
          additionalProperties: true
          properties:
            duration: { type: number }
            author: { type: string }
            title: { type: string }
            platform:
              type: string
              enum: [tiktok, instagram, youtube]
    OrchestrateRequest:
      type: object
      additionalProperties: true
      required: [url]
      properties:
        url: { type: string, format: uri }
        collectionId: { type: string }
        options:
          type: object
          additionalProperties: true
          properties:
            transcribe: { type: boolean }
            preferAudioOnly: { type: boolean }
    OrchestrateResponse:
      type: object
      additionalProperties: true
      required: [success]
      properties:
        success:
          type: boolean
          enum: [true]
        videoId: { type: string }
        transcript: { type: string }
        jobId: { type: string }
    TikTokUserInfo:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        username: { type: string }
        nickname: { type: string }
        avatar: { type: string, format: uri }
        verified: { type: boolean }
        signature: { type: string }
        stats:
          type: object
          additionalProperties: true
          properties:
            followingCount: { type: number }
            followerCount: { type: number }
            heartCount: { type: number }
            videoCount: { type: number }
            diggCount: { type: number }
    TikTokVideo:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        description: { type: string }
        createTime: { type: number }
        duration: { type: number }
        cover: { type: string, format: uri }
        playUrl: { type: string, format: uri }
        downloadUrl: { type: string, format: uri }
        stats:
          type: object
          additionalProperties: true
          properties:
            diggCount: { type: number }
            shareCount: { type: number }
            commentCount: { type: number }
            playCount: { type: number }
            collectCount: { type: number }
        music:
          type: object
          additionalProperties: true

    TikTokUserFeedResponse:
      type: object
      additionalProperties: true
      required: [success]
      properties:
        success:
          type: boolean
          enum: [true]
        userInfo:
          $ref: "#/components/schemas/TikTokUserInfo"
        videos:
          type: array
          items: { $ref: "#/components/schemas/TikTokVideo" }
        metadata:
          type: object
          additionalProperties: true
        timestamp: { type: string, format: date-time }
    InstagramUserIdResponse:
      type: object
      additionalProperties: true
      required: [success, user_id, username]
      properties:
        success:
          type: boolean
          enum: [true]
        user_id:
          oneOf:
            - { type: string }
            - { type: number }
        username:
          type: string
    InstagramProcessedVideo:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        platform: { type: string, enum: [instagram] }
        videoUrl: { type: string, format: uri }
        downloadUrl: { type: string, format: uri }
        playUrl: { type: string, format: uri }
        thumbnailUrl: { type: string, format: uri }
        viewCount: { type: number }
        likeCount: { type: number }
        quality: { type: string }
        title: { type: string }
        description: { type: string }
        author: { type: string }
        duration: { type: number }
    InstagramProfileData:
      type: object
      additionalProperties: true
      properties:
        profileImageUrl: { type: string, format: uri }
        displayName: { type: string }
        bio: { type: string }
        followersCount: { type: number }
        followingCount: { type: number }
        postsCount: { type: number }
        isVerified: { type: boolean }
        isPrivate: { type: boolean }
        externalUrl: { type: string, format: uri }
        category: { type: string }
    InstagramReelsResponse:
      type: object
      additionalProperties: true
      required: [success]
      properties:
        success:
          type: boolean
          enum: [true]
        status:
          type: string
        data:
          type: object
          additionalProperties: true
          properties:
            items:
              type: array
              items:
                type: object
                additionalProperties: true
        processed:
          type: object
          additionalProperties: true
          properties:
            videos:
              type: array
              items: { $ref: "#/components/schemas/InstagramProcessedVideo" }
            profileData:
              $ref: "#/components/schemas/InstagramProfileData"
            totalFound: { type: number }
    TranscriptChunk:
      type: object
      required: [text]
      additionalProperties: true
      properties:
        text: { type: string }
        start: { type: number }
        end: { type: number }
        timestamp:
          type: array
          items: { type: number }
    IdeaSeed:
      type: object
      additionalProperties: true
      required: [coreClaim, payoff, proof, angle, cta, provenance, scores]
      properties:
        coreClaim: { type: string }
        payoff: { type: string }
        proof:
          type: object
          additionalProperties: false
          required: [type, text]
          properties:
            type:
              type: string
              enum: [stat, example, quote, demo]
            text: { type: string }
            numbers: { type: string }
        mechanismOrSteps:
          type: array
          maxItems: 3
          items: { type: string }
        angle:
          type: string
          enum: [question, contrarian, stat_shock, mistake, myth, story]
        painPoint: { type: string }
        reasonToBelieve: { type: string }
        context: { type: string }
        promise: { type: string }
        cta:
          type: object
          additionalProperties: false
          required: [type, prompt]
          properties:
            type:
              type: string
              enum: [comment, watch_full, subscribe, download, signup, follow, buy]
            prompt: { type: string }
            target:
              oneOf:
                - { type: string }
                - type: object
                  additionalProperties: false
                  required: [videoTs]
                  properties:
                    videoTs: { type: number }
        entities:
          type: array
          items: { type: string }
        audienceLevel:
          type: string
          enum: [beginner, intermediate, advanced]
        provenance:
          type: object
          additionalProperties: false
          required: [startSec, endSec]
          properties:
            startSec: { type: number }
            endSec: { type: number }
        scores:
          type: object
          additionalProperties: false
          required: [hookPotential, specificity, actionability, novelty, overall]
          properties:
            hookPotential: { type: number }
            specificity: { type: number }
            actionability: { type: number }
            novelty: { type: number }
            overall: { type: number }
    GenerateIdeaSeedsRequest:
      type: object
      additionalProperties: true
      properties:
        url: { type: string, format: uri }
        lang: { type: string }
        videoId: { type: string }
        transcript: { type: string }
        chunks:
          type: array
          items: { $ref: "#/components/schemas/TranscriptChunk" }
        maxIdeas: { type: integer, minimum: 1 }
        minOverall: { type: integer, minimum: 0, maximum: 100 }
        audienceLevel:
          type: string
          enum: [beginner, intermediate, advanced]
    GenerateIdeaSeedsResponse:
      type: object
      additionalProperties: true
      required: [success, ideas]
      properties:
        success:
          type: boolean
          enum: [true]
        ideas:
          type: array
          items: { $ref: "#/components/schemas/IdeaSeed" }
        meta:
          type: object
          additionalProperties: true
          properties:
            model: { type: string }
            durationMs: { type: number }
            maxIdeas: { type: integer }
            minOverall: { type: integer }
            audienceLevel: { type: string }
            transcriptChars: { type: integer }
paths:
  /api/notes:
    get:
      summary: List notes for the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Notes fetched successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NotesResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    post:
      summary: Create a note for the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateNoteRequest" }
      responses:
        "201":
          description: Note created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NoteResponse" }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/notes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      summary: Fetch a note by id.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Note returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NoteResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Note not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    put:
      summary: Update a note by id.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateNoteRequest" }
      responses:
        "200":
          description: Note updated.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NoteResponse" }
        "400":
          description: Invalid update payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Note not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    delete:
      summary: Delete a note by id.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Note deleted.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Note not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/collections:
    get:
      summary: List collections for the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Collections fetched successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CollectionsResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/collections/move-video:
    post:
      summary: Move a video between collections.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MoveVideoRequest" }
      responses:
        "200":
          description: Video moved.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/collections/copy-video:
    post:
      summary: Copy a video to another collection.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CopyVideoRequest" }
      responses:
        "200":
          description: Video copied.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/collections/update:
    patch:
      summary: Update a collection's metadata.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateCollectionRequest" }
      responses:
        "200":
          description: Collection updated.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/collections/delete:
    delete:
      summary: Delete a collection by id.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Collection deleted.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/videos/collection:
    post:
      summary: List videos for a collection.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                collectionId: { type: string }
                videoLimit: { type: number }
                lastDocId: { type: string }
      responses:
        "200":
          description: Videos returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/VideosResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/videos/add-to-collection:
    post:
      summary: Add a processed video to a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AddVideoToCollectionRequest" }
      responses:
        "200":
          description: Video added.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  videoId: { type: string }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/scripts:
    get:
      summary: List scripts for the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Scripts fetched successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ScriptsResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Firestore unavailable.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    post:
      summary: Create a script for the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateScriptRequest" }
      responses:
        "200":
          description: Script created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ScriptResponse" }
        "400":
          description: Invalid request payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Firestore unavailable.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/scripts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      summary: Fetch a script by id.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Script returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ScriptResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "403":
          description: Script belongs to another user.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Script not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    put:
      summary: Update a script.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateScriptRequest" }
      responses:
        "200":
          description: Script updated.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ScriptResponse" }
        "400":
          description: Invalid update payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "403":
          description: Script belongs to another user.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Script not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    delete:
      summary: Delete a script.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Script deleted.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicSuccessResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "403":
          description: Script belongs to another user.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: Script not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/scripts/youtube-ideas:
    post:
      summary: Generate YouTube idea seeds from a transcript.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/GenerateIdeaSeedsRequest" }
      responses:
        "200":
          description: Idea seeds generated.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/GenerateIdeaSeedsResponse" }
        "400":
          description: Invalid payload or transcript.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          description: Authentication required.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Downstream model failure.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Service unavailable (e.g., missing Gemini key).
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/video/transcribe-from-url:
    post:
      summary: Transcribe a video from a platform URL.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TranscribeFromUrlRequest" }
      responses:
        "200":
          description: Transcript generated.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TranscribeFromUrlResponse" }
        "400":
          description: Invalid or missing URL.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream fetch/model error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/video/orchestrate:
    post:
      summary: Orchestrate scrape → transcribe → persist workflow.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrchestrateRequest" }
      responses:
        "200":
          description: Orchestration completed (or job accepted).
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrchestrateResponse" }
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/video/scrape-url:
    post:
      summary: Resolve a public video URL to downloadable media.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              required: [url]
              properties:
                url: { type: string, format: uri }
                preferAudioOnly: { type: boolean }
      responses:
        "200":
          description: Media resolved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                required: [success]
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  result:
                    type: object
                    additionalProperties: true
                    properties:
                      downloadUrl: { type: string, format: uri }
                      audioUrl: { type: string, format: uri }
                      thumbnailUrl: { type: string, format: uri }
                      title: { type: string }
                      description: { type: string }
                      author: { type: string }
                      duration: { type: number }
                      platform:
                        type: string
                        enum: [tiktok, instagram]
        "400":
          description: Invalid or unsupported URL.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream scraping error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /api/instagram/user-id:
    get:
      summary: Resolve Instagram user ID by username.
      parameters:
        - name: username
          in: query
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User ID resolved.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InstagramUserIdResponse" }
        "400":
          description: Missing or invalid username.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "404":
          description: User not found.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream API error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/instagram/user-reels:
    get:
      summary: Fetch Instagram reels for a user.
      parameters:
        - name: user_id
          in: query
          required: true
          schema: { oneOf: [{ type: string }, { type: number }] }
        - name: username
          in: query
          required: false
          schema: { type: string }
        - name: count
          in: query
          required: false
          schema: { type: integer, minimum: 1 }
        - name: include_feed_video
          in: query
          required: false
          schema: { type: boolean }
      responses:
        "200":
          description: Reels fetched.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InstagramReelsResponse" }
        "400":
          description: Invalid parameters.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream API error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    post:
      summary: Fetch Instagram reels for a user (JSON body variant).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                userId: { oneOf: [{ type: string }, { type: number }] }
                username: { type: string }
                count: { type: integer, minimum: 1 }
                includeFeedVideo: { type: boolean }
              required: [userId]
      responses:
        "200":
          description: Reels fetched.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InstagramReelsResponse" }
        "400":
          description: Invalid parameters.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream API error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/tiktok/user-feed:
    get:
      summary: Fetch TikTok user feed by username.
      parameters:
        - name: username
          in: query
          required: true
          schema: { type: string }
        - name: count
          in: query
          required: false
          schema: { type: integer, minimum: 1 }
      responses:
        "200":
          description: User feed returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TikTokUserFeedResponse" }
        "400":
          description: Missing or invalid parameters.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream API error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
    post:
      summary: Fetch TikTok user feed (JSON body variant).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                username: { type: string }
                count: { type: integer, minimum: 1 }
              required: [username]
      responses:
        "200":
          description: User feed returned.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TikTokUserFeedResponse" }
        "400":
          description: Missing or invalid parameters.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream API error.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
